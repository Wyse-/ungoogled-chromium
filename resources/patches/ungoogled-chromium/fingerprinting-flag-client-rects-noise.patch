# Add flag --fingerprinting-client-rects-noise to enable fingerprinting deception for getClientRects and getBoundingClientRect
# Based on https://github.com/Eloston/ungoogled-chromium/pull/377/commits/4151259b3248f0fc5c42fa262a1d1dd43c39fb60

--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -114,6 +114,7 @@
 #include "services/network/public/cpp/network_switches.h"
 #include "services/service_manager/sandbox/switches.h"
 #include "third_party/libaom/av1_features.h"
+#include "third_party/ungoogled/ungoogled_switches.h"
 #include "ui/app_list/app_list_features.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/base/ui_base_switches.h"
@@ -1236,6 +1237,10 @@ const FeatureEntry kFeatureEntries[] = {
      "Force punycode hostnames",
      "Force punycode in hostnames instead of Unicode when displaying Internationalized Domain Names (IDNs).",
      kOsAll, SINGLE_VALUE_TYPE("force-punycode-hostnames")},
+    {"fingerprinting-client-rects-noise",
+     "Enable get*ClientRects() fingerprint deception",
+     "Scale the output values of getClientRects() and getBoundingClientRect() with a randomly selected factor in the range -5% to 5%, which are recomputed on every document initialization.",
+     kOsAll, SINGLE_VALUE_TYPE(switches::kFingerprintingClientRectsNoise)},
 
     {"ignore-gpu-blacklist", flag_descriptions::kIgnoreGpuBlacklistName,
      flag_descriptions::kIgnoreGpuBlacklistDescription, kOsAll,
--- a/content/child/runtime_features.cc
+++ b/content/child/runtime_features.cc
@@ -19,6 +19,7 @@
 #include "services/device/public/cpp/device_features.h"
 #include "services/network/public/cpp/features.h"
 #include "third_party/WebKit/public/platform/WebRuntimeFeatures.h"
+#include "third_party/ungoogled/ungoogled_switches.h"
 #include "ui/gfx/switches.h"
 #include "ui/gl/gl_switches.h"
 #include "ui/native_theme/native_theme_features.h"
@@ -435,6 +436,9 @@ void SetRuntimeFeaturesDefaultsAndUpdate
 
   if (base::FeatureList::IsEnabled(features::kUnifiedTouchAdjustment))
     WebRuntimeFeatures::EnableUnifiedTouchAdjustment(true);
+
+  WebRuntimeFeatures::EnableFingerprintingClientRectsNoise(
+      command_line.HasSwitch(switches::kFingerprintingClientRectsNoise));
 };
 
 }  // namespace content
--- a/third_party/WebKit/Source/core/dom/Document.cpp
+++ b/third_party/WebKit/Source/core/dom/Document.cpp
@@ -29,6 +29,7 @@
 
 #include "core/dom/Document.h"
 
+#include "base/rand_util.h"
 #include "bindings/core/v8/ExceptionMessages.h"
 #include "bindings/core/v8/ExceptionState.h"
 #include "bindings/core/v8/ScriptController.h"
@@ -729,6 +730,15 @@ Document::Document(const DocumentInit& i
 #ifndef NDEBUG
   liveDocumentSet().insert(this);
 #endif
+
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+    // Precompute -5% to 5% noise factor for get*ClientRect fingerprinting
+    noise_factor_x_ = 1 + (base::RandDouble() - 0.5) * 0.05;
+    noise_factor_y_ = 1 + (base::RandDouble() - 0.5) * 0.05;
+  } else {
+    noise_factor_x_ = 1;
+    noise_factor_y_ = 1;
+  }
 }
 
 Document::~Document() {
@@ -755,6 +765,14 @@ Range* Document::CreateRangeAdjustedToTr
                        Position::BeforeNode(*shadow_host));
 }
 
+double Document::GetNoiseFactorX() {
+  return noise_factor_x_;
+}
+
+double Document::GetNoiseFactorY() {
+  return noise_factor_y_;
+}
+
 SelectorQueryCache& Document::GetSelectorQueryCache() {
   if (!selector_query_cache_)
     selector_query_cache_ = std::make_unique<SelectorQueryCache>();
--- a/third_party/WebKit/Source/core/dom/Document.h
+++ b/third_party/WebKit/Source/core/dom/Document.h
@@ -406,6 +406,10 @@ class CORE_EXPORT Document : public Cont
 
   String origin() const;
 
+  // Values for get*ClientRect fingerprint deception
+  double GetNoiseFactorX();
+  double GetNoiseFactorY();
+
   String visibilityState() const;
   mojom::PageVisibilityState GetPageVisibilityState() const;
   bool hidden() const;
@@ -1663,6 +1667,9 @@ class CORE_EXPORT Document : public Cont
 
   double start_time_;
 
+  double noise_factor_x_;
+  double noise_factor_y_;
+
   TraceWrapperMember<ScriptRunner> script_runner_;
 
   HeapVector<Member<ScriptElementBase>> current_script_stack_;
--- a/third_party/WebKit/Source/core/dom/Element.cpp
+++ b/third_party/WebKit/Source/core/dom/Element.cpp
@@ -1327,6 +1327,11 @@ DOMRectList* Element::getClientRects() {
   DCHECK(element_layout_object);
   GetDocument().AdjustFloatQuadsForScrollAndAbsoluteZoom(
       quads, *element_layout_object);
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+    for (FloatQuad& quad : quads) {
+      quad.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+    }
+  }
   return DOMRectList::Create(quads);
 }
 
@@ -1344,6 +1349,9 @@ DOMRect* Element::getBoundingClientRect(
   DCHECK(element_layout_object);
   GetDocument().AdjustFloatRectForScrollAndAbsoluteZoom(result,
                                                         *element_layout_object);
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+    result.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+  }
   return DOMRect::FromFloatRect(result);
 }
 
--- a/third_party/WebKit/Source/core/dom/Range.cpp
+++ b/third_party/WebKit/Source/core/dom/Range.cpp
@@ -1589,11 +1589,21 @@ DOMRectList* Range::getClientRects() con
   Vector<FloatQuad> quads;
   GetBorderAndTextQuads(quads);
 
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+    for (FloatQuad& quad : quads) {
+      quad.Scale(owner_document_->GetNoiseFactorX(), owner_document_->GetNoiseFactorY());
+    }
+  }
+
   return DOMRectList::Create(quads);
 }
 
 DOMRect* Range::getBoundingClientRect() const {
-  return DOMRect::FromFloatRect(BoundingRect());
+  auto rect = BoundingRect();
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+    rect.Scale(owner_document_->GetNoiseFactorX(), owner_document_->GetNoiseFactorY());
+  }
+  return DOMRect::FromFloatRect(rect);
 }
 
 // TODO(editing-dev): We should make
--- a/third_party/WebKit/Source/platform/runtime_enabled_features.json5
+++ b/third_party/WebKit/Source/platform/runtime_enabled_features.json5
@@ -432,6 +432,9 @@
       status: "stable",
     },
     {
+      name: "FingerprintingClientRectsNoise",
+    },
+    {
       name: "FocusOptions",
       status: "stable",
     },
--- a/third_party/WebKit/Source/platform/exported/WebRuntimeFeatures.cpp
+++ b/third_party/WebKit/Source/platform/exported/WebRuntimeFeatures.cpp
@@ -506,4 +506,8 @@ void WebRuntimeFeatures::EnableMojoBlobU
   RuntimeEnabledFeatures::SetMojoBlobURLsEnabled(enable);
 }
 
+void WebRuntimeFeatures::EnableFingerprintingClientRectsNoise(bool enable) {
+  RuntimeEnabledFeatures::SetFingerprintingClientRectsNoiseEnabled(enable);
+}
+
 }  // namespace blink
--- a/third_party/WebKit/public/platform/WebRuntimeFeatures.h
+++ b/third_party/WebKit/public/platform/WebRuntimeFeatures.h
@@ -188,6 +188,7 @@ class WebRuntimeFeatures {
   BLINK_PLATFORM_EXPORT static void EnableCodeCacheAfterExecute(bool);
   BLINK_PLATFORM_EXPORT static void EnableUnifiedTouchAdjustment(bool);
   BLINK_PLATFORM_EXPORT static void EnableMojoBlobURLs(bool);
+  BLINK_PLATFORM_EXPORT static void EnableFingerprintingClientRectsNoise(bool);
 
  private:
   WebRuntimeFeatures();
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1811,6 +1811,7 @@ jumbo_split_static_library("browser") {
     "//third_party/metrics_proto",
     "//third_party/re2",
     "//third_party/smhasher:cityhash",
+    "//third_party/ungoogled:switches",
     "//third_party/widevine/cdm:headers",
     "//third_party/zlib",
     "//third_party/zlib:minizip",
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -171,6 +171,7 @@ jumbo_source_set("browser") {
     "//third_party/icu",
     "//third_party/libyuv",
     "//third_party/re2",
+    "//third_party/ungoogled:switches",
     "//third_party/zlib",
     "//third_party/zlib/google:compression_utils",
     "//third_party/zlib/google:zip",
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -205,6 +205,7 @@
 #include "storage/browser/fileapi/sandbox_file_system_backend.h"
 #include "third_party/WebKit/public/common/page/launching_process_state.h"
 #include "third_party/WebKit/public/public_features.h"
+#include "third_party/ungoogled/ungoogled_switches.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/base/ui_base_switches.h"
@@ -2589,6 +2590,7 @@ void RenderProcessHostImpl::PropagateBro
     switches::kEnableWebGLImageChromium,
     switches::kEnableWebVR,
     switches::kExplicitlyAllowedPorts,
+    switches::kFingerprintingClientRectsNoise,
     switches::kForceColorProfile,
     switches::kForceDeviceScaleFactor,
     switches::kForceGpuMemAvailableMb,
--- a/content/child/BUILD.gn
+++ b/content/child/BUILD.gn
@@ -126,6 +126,7 @@ target(link_target_type, "child") {
     "//third_party/WebKit/public:scaled_resources",
     "//third_party/WebKit/public/common",
     "//third_party/ced",
+    "//third_party/ungoogled:switches",
     "//third_party/zlib/google:compression_utils",
     "//ui/base",
     "//ui/events/gestures/blink",
--- a/third_party/WebKit/Source/platform/BUILD.gn
+++ b/third_party/WebKit/Source/platform/BUILD.gn
@@ -1562,6 +1562,7 @@ jumbo_component("platform") {
     "//third_party/WebKit/public:offscreen_canvas_mojo_bindings_blink",
     "//third_party/ced",
     "//third_party/icu",
+    "//third_party/ungoogled:switches",
     "//ui/gfx",
     "//ui/gfx/geometry",
   ]
