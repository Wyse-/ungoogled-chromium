# Fix building without Safe Browsing on Windows
# This also removes other unnecessary services that depend on Safe Browsing, such as Chrome Cleaner

--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -304,8 +304,6 @@ split_static_library("browser") {
     "component_updater/subresource_filter_component_installer.h",
     "component_updater/supervised_user_whitelist_installer.cc",
     "component_updater/supervised_user_whitelist_installer.h",
-    "component_updater/sw_reporter_installer_win.cc",
-    "component_updater/sw_reporter_installer_win.h",
     "component_updater/third_party_module_list_component_installer_win.cc",
     "component_updater/third_party_module_list_component_installer_win.h",
     "conflicts/enumerate_input_method_editors_win.cc",
@@ -1599,11 +1597,11 @@ split_static_library("browser") {
     "//chrome/browser/metrics:expired_histograms_array",
     "//chrome/browser/metrics/variations:chrome_ui_string_overrider_factory",
     "//chrome/browser/net:probe_message_proto",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ssl:proto",
     "//chrome/browser/ui",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/common/net",
+    "//chrome/common/safe_browsing",
     "//chrome/installer/util:with_no_strings",
     "//components/about_handler",
     "//components/app_modal",
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -808,7 +808,6 @@ static_library("extensions") {
     "//chrome/browser/devtools",
     "//chrome/browser/media/router",
     "//chrome/browser/media/router/discovery",
-    "//chrome/browser/safe_browsing",
     "//chrome/common",
     "//chrome/common/extensions:mojo_bindings",
     "//chrome/common/extensions/api:api_registration",
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -356,7 +356,6 @@ split_static_library("ui") {
     "//chrome/browser/devtools",
     "//chrome/browser/engagement:mojo_bindings",
     "//chrome/browser/media:mojo_bindings",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/ui/webui/interventions_internals:mojo_bindings",
     "//chrome/browser/ui/webui/omnibox:mojo_bindings",
--- a/chrome/browser/chrome_browser_main_win.cc
+++ b/chrome/browser/chrome_browser_main_win.cc
@@ -45,9 +45,6 @@
 #include "chrome/browser/memory/swap_thrashing_monitor.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/profiles/profile_shortcut_manager.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_util_win.h"
 #include "chrome/browser/ui/simple_message_box.h"
 #include "chrome/browser/ui/uninstall_browser_prompt.h"
 #include "chrome/browser/win/browser_util.h"
@@ -384,16 +381,6 @@ void ShowCloseBrowserFirstMessageBox() {
       l10n_util::GetStringUTF16(IDS_UNINSTALL_CLOSE_APP));
 }
 
-void MaybePostSettingsResetPrompt() {
-  if (base::FeatureList::IsEnabled(safe_browsing::kSettingsResetPrompt)) {
-    content::BrowserThread::PostAfterStartupTask(
-        FROM_HERE,
-        content::BrowserThread::GetTaskRunnerForThread(
-            content::BrowserThread::UI),
-        base::Bind(safe_browsing::MaybeShowSettingsResetPromptWithDelay));
-  }
-}
-
 }  // namespace
 
 int DoUninstallTasks(bool chrome_still_running) {
@@ -526,23 +513,6 @@ void ChromeBrowserMainPartsWin::PostBrow
 
   InitializeChromeElf();
 
-  // Reset settings for the current profile if it's tagged to be reset after a
-  // complete run of the Chrome Cleanup tool. If post-cleanup settings reset is
-  // enabled, we delay checks for settings reset prompt until the scheduled
-  // reset is finished.
-  if (safe_browsing::PostCleanupSettingsResetter::IsEnabled()) {
-    // Using last opened profiles, because we want to find reset the profile
-    // that was open in the last Chrome run, which may not be open yet in
-    // the current run.
-    safe_browsing::PostCleanupSettingsResetter().ResetTaggedProfiles(
-        g_browser_process->profile_manager()->GetLastOpenedProfiles(),
-        base::BindOnce(&MaybePostSettingsResetPrompt),
-        base::MakeUnique<
-            safe_browsing::PostCleanupSettingsResetter::Delegate>());
-  } else {
-    MaybePostSettingsResetPrompt();
-  }
-
   // Record UMA data about whether the fault-tolerant heap is enabled.
   // Use a delayed task to minimize the impact on startup time.
   content::BrowserThread::PostDelayedTask(
--- a/chrome/browser/ui/webui/settings/chrome_cleanup_handler.cc
+++ b/chrome/browser/ui/webui/settings/chrome_cleanup_handler.cc
@@ -293,8 +293,6 @@ void ChromeCleanupHandler::HandleStartCl
   // The state is propagated to all open tabs and should be consistent.
   DCHECK_EQ(controller_->logs_enabled(), allow_logs_upload);
 
-  safe_browsing::RecordCleanupStartedHistogram(
-      safe_browsing::CLEANUP_STARTED_FROM_PROMPT_IN_SETTINGS);
   base::RecordAction(
       base::UserMetricsAction("SoftwareReporter.CleanupWebui_StartCleanup"));
 
--- a/chrome/browser/ui/webui/settings/md_settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/md_settings_ui.cc
@@ -50,9 +50,6 @@
 #include "printing/features/features.h"
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_win.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
-#include "chrome/browser/ui/webui/settings/chrome_cleanup_handler.h"
 #if defined(GOOGLE_CHROME_BUILD)
 #include "chrome/grit/chrome_unscaled_resources.h"
 #endif
@@ -203,13 +200,6 @@ MdSettingsUI::MdSettingsUI(content::WebU
   bool chromeCleanupEnabled = false;
   bool userInitiatedCleanupsEnabled = false;
 
-  AddSettingsPageUIHandler(std::make_unique<ChromeCleanupHandler>(profile));
-
-  safe_browsing::ChromeCleanerController* cleaner_controller =
-      safe_browsing::ChromeCleanerController::GetInstance();
-  chromeCleanupEnabled = cleaner_controller->ShouldShowCleanupInSettingsUI();
-  userInitiatedCleanupsEnabled = safe_browsing::UserInitiatedCleanupsEnabled();
-
 #if defined(GOOGLE_CHROME_BUILD)
   html_source->AddResourcePath("partner-logo.svg", IDR_CHROME_CLEANUP_PARTNER);
 #if BUILDFLAG(OPTIMIZE_WEBUI)
@@ -320,14 +310,6 @@ MdSettingsUI::MdSettingsUI(content::WebU
 
   content::WebUIDataSource::Add(web_ui->GetWebContents()->GetBrowserContext(),
                                 html_source);
-
-#if defined(OS_WIN)
-  // This needs to be below content::WebUIDataSource::Add to make sure there
-  // is a WebUIDataSource to update if the observer is immediately notified.
-  cleanup_observer_.reset(
-      new safe_browsing::ChromeCleanerStateChangeObserver(base::Bind(
-          &MdSettingsUI::UpdateCleanupDataSource, base::Unretained(this))));
-#endif  // defined(OS_WIN)
 }
 
 MdSettingsUI::~MdSettingsUI() {
@@ -358,17 +340,4 @@ void MdSettingsUI::DocumentOnLoadComplet
                       base::Time::Now() - load_start_time_);
 }
 
-#if defined(OS_WIN)
-void MdSettingsUI::UpdateCleanupDataSource(bool cleanupEnabled) {
-  DCHECK(web_ui());
-  Profile* profile = Profile::FromWebUI(web_ui());
-
-  std::unique_ptr<base::DictionaryValue> update(new base::DictionaryValue);
-  update->SetBoolean("chromeCleanupEnabled", cleanupEnabled);
-
-  content::WebUIDataSource::Update(profile, chrome::kChromeUISettingsHost,
-                                   std::move(update));
-}
-#endif  // defined(OS_WIN)
-
 }  // namespace settings
--- a/chrome/browser/ui/webui/settings/md_settings_ui.h
+++ b/chrome/browser/ui/webui/settings/md_settings_ui.h
@@ -13,10 +13,6 @@
 #include "content/public/browser/web_contents_observer.h"
 #include "content/public/browser/web_ui_controller.h"
 
-#if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_state_change_observer_win.h"
-#endif
-
 namespace content {
 class WebUIMessageHandler;
 }
@@ -49,12 +45,6 @@ class MdSettingsUI : public content::Web
 
   base::Time load_start_time_;
 
-#if defined(OS_WIN)
-  void UpdateCleanupDataSource(bool cleanupEnabled);
-  std::unique_ptr<safe_browsing::ChromeCleanerStateChangeObserver>
-      cleanup_observer_;
-#endif
-
   DISALLOW_COPY_AND_ASSIGN(MdSettingsUI);
 };
 
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -16,35 +16,10 @@ proto_library("proto") {
 
 source_set("safe_browsing") {
   sources = [
-    "file_type_policies.cc",
-    "file_type_policies.h",
+    "pe_image_reader_win.cc",
+    "pe_image_reader_win.h",
   ]
 
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "archive_analyzer_results.cc",
-      "archive_analyzer_results.h",
-      "binary_feature_extractor.cc",
-      "binary_feature_extractor.h",
-      "binary_feature_extractor_mac.cc",
-      "binary_feature_extractor_posix.cc",
-      "binary_feature_extractor_win.cc",
-      "download_protection_util.cc",
-      "download_protection_util.h",
-      "ipc_protobuf_message_macros.h",
-      "ipc_protobuf_message_null_macros.h",
-      "mach_o_image_reader_mac.cc",
-      "mach_o_image_reader_mac.h",
-      "pe_image_reader_win.cc",
-      "pe_image_reader_win.h",
-      "protobuf_message_log_macros.h",
-      "protobuf_message_read_macros.h",
-      "protobuf_message_write_macros.h",
-      "zip_analyzer.cc",
-      "zip_analyzer.h",
-    ]
-  }
-
   public_deps = [
     "//base:i18n",
     "//chrome/browser:resources",
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -230,7 +230,6 @@
 #include "base/trace_event/trace_event_etw_export_win.h"
 #include "base/win/win_util.h"
 #include "chrome/browser/chrome_browser_main_win.h"
-#include "chrome/browser/component_updater/sw_reporter_installer_win.h"
 #include "chrome/browser/component_updater/third_party_module_list_component_installer_win.h"
 #include "chrome/browser/downgrade/user_data_downgrade.h"
 #include "chrome/browser/first_run/upgrade_util_win.h"
@@ -566,7 +565,6 @@ void RegisterComponentsForUpdate(PrefSer
 
 #if defined(OS_WIN)
 #if defined(GOOGLE_CHROME_BUILD)
-  RegisterSwReporterComponent(cus);
   RegisterThirdPartyModuleListComponent(cus);
 #endif  // defined(GOOGLE_CHROME_BUILD)
 #endif  // defined(OS_WIN)
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -97,7 +97,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/pref_proxy_config_tracker_impl.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/search_engines/template_url_prepopulate_data.h"
 #include "components/signin/core/browser/profile_management_switches.h"
 #include "components/ssl_config/ssl_config_service_manager.h"
@@ -270,9 +269,6 @@
 
 #if defined(OS_WIN)
 #include "chrome/browser/apps/app_launch_for_metro_restart_win.h"
-#include "chrome/browser/component_updater/sw_reporter_installer_win.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_prefs_manager.h"
 #include "chrome/browser/ui/desktop_ios_promotion/desktop_ios_promotion_util.h"
 #endif
 
@@ -456,7 +452,6 @@ void RegisterLocalState(PrefRegistrySimp
 
 #if defined(OS_WIN)
   app_metro_launch::RegisterPrefs(registry);
-  component_updater::RegisterPrefsForSwReporter(registry);
   desktop_ios_promotion::RegisterLocalPrefs(registry);
   password_manager::PasswordManager::RegisterLocalPrefs(registry);
 #endif
@@ -511,7 +506,6 @@ void RegisterProfilePrefs(user_prefs::Pr
   ProtocolHandlerRegistry::RegisterProfilePrefs(registry);
   PushMessagingAppIdentifier::RegisterProfilePrefs(registry);
   RegisterBrowserUserPrefs(registry);
-  safe_browsing::RegisterProfilePrefs(registry);
   secure_origin_whitelist::RegisterProfilePrefs(registry);
   SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(registry);
   SessionStartupPref::RegisterProfilePrefs(registry);
@@ -639,12 +633,8 @@ void RegisterProfilePrefs(user_prefs::Pr
 #endif
 
 #if defined(OS_WIN)
-  component_updater::RegisterProfilePrefsForSwReporter(registry);
   desktop_ios_promotion::RegisterProfilePrefs(registry);
   NetworkProfileBubble::RegisterProfilePrefs(registry);
-  safe_browsing::SettingsResetPromptPrefsManager::RegisterProfilePrefs(
-      registry);
-  safe_browsing::PostCleanupSettingsResetter::RegisterProfilePrefs(registry);
 #endif
 
 #if defined(TOOLKIT_VIEWS)
