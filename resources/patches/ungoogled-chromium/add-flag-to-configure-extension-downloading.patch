# Add extension-mime-request-handling chrome://flag to tweak the behavior of
# extension MIME types

--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -170,6 +170,16 @@ const unsigned kOsDesktop = kOsMac | kOs
 const unsigned kOsAura = kOsWin | kOsLinux | kOsCrOS;
 #endif  // USE_AURA
 
+const FeatureEntry::Choice kExtensionHandlingChoices[] = {
+    {flags_ui::kGenericExperimentChoiceDefault, "", ""},
+    {"Download as regular file",
+     "extension-mime-request-handling",
+     "download-as-regular-file"},
+    {"Install always",
+     "extension-mime-request-handling",
+     "install-always"},
+};
+
 const FeatureEntry::Choice kTouchEventFeatureDetectionChoices[] = {
     {flags_ui::kGenericExperimentChoiceAutomatic, "", ""},
     {flags_ui::kGenericExperimentChoiceEnabled,
@@ -1213,6 +1223,10 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kDisableTrkbarDescription, kOsDesktop,
      SINGLE_VALUE_TYPE("disable-trkbar")},
 #endif
+    {"extension-mime-request-handling",
+     "Handling of extension MIME type requests",
+     "Used when deciding how to handle a request for a CRX or User Script MIME type",
+     kOsAll, MULTI_VALUE_TYPE(kExtensionHandlingChoices)},
     {"enable-metrics",
      "Record metrics",
      "Record histograms and user actions.",
--- a/chrome/browser/download/download_crx_util.cc
+++ b/chrome/browser/download/download_crx_util.cc
@@ -6,6 +6,7 @@
 
 #include "chrome/browser/download/download_crx_util.h"
 
+#include "base/command_line.h"
 #include "chrome/browser/chrome_notification_types.h"
 #include "chrome/browser/extensions/crx_installer.h"
 #include "chrome/browser/extensions/extension_install_prompt.h"
@@ -124,7 +125,15 @@ bool IsExtensionDownload(const DownloadI
   if (download_item.GetMimeType() == extensions::Extension::kMimeType ||
       extensions::UserScript::IsURLUserScript(download_item.GetURL(),
                                               download_item.GetMimeType())) {
-    return true;
+    const base::CommandLine& command_line =
+        *base::CommandLine::ForCurrentProcess();
+    if (command_line.HasSwitch("extension-mime-request-handling") &&
+        command_line.GetSwitchValueASCII("extension-mime-request-handling") ==
+        "download-as-regular-file") {
+      return false;
+    } else {
+      return true;
+    }
   } else {
     return false;
   }
--- a/chrome/browser/extensions/extension_management.cc
+++ b/chrome/browser/extensions/extension_management.cc
@@ -8,6 +8,7 @@
 
 #include "base/bind.h"
 #include "base/bind_helpers.h"
+#include "base/command_line.h"
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
 #include "base/metrics/histogram_macros.h"
@@ -142,6 +143,13 @@ bool ExtensionManagement::IsInstallation
 bool ExtensionManagement::IsOffstoreInstallAllowed(
     const GURL& url,
     const GURL& referrer_url) const {
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  if (command_line.HasSwitch("extension-mime-request-handling") &&
+      command_line.GetSwitchValueASCII("extension-mime-request-handling") ==
+      "install-always") {
+    return true;
+  }
   // No allowed install sites specified, disallow by default.
   if (!global_settings_->has_restricted_install_sources)
     return false;
